// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	
	Not(in=instruction[15],out=aInst);	//Buffer for i-bit
	Or(a=aInst,b=instruction[5],out=regALoad);	//allow reg A to be written for A instructs or ALU output assuming instruction[5] = A
	Mux16(a= instruction,b= ALUout,sel= instruction[15],out= regAIn);
	ARegister(in= regAIn,load= regALoad,out= regAOut);			//A Register	//TODO: check d-bit for loading
	
	Not(in=zr,out=zrBar);Not(in=ng,out=ngBar);
	And(a=instruction[2],b=ng,out=minterm1);And(a=instruction[1],b=zr,out=minterm2);
	And(a=instruction[0],b=zrBar,out=partial1);And(a=partial1,b=ngBar,out=minterm3);	//Assuming j1 = instruction[2] .. j3 = instruction[0]
	Or(a=minterm1,b=minterm2,out=partial2);Or(a=partial2,b=minterm3,out=jmpNetOut);
	And(a=instruction[15],b=jmpNetOut, out=PCload);
	PC(in= regAOut,load= PCload,inc= true,reset=reset,out[0..14]= pc);			//PC & PC loading network
	
	And(a=instruction[4],b=instruction[15],out=Dload);
	DRegister(in= ALUout,load= Dload,out= ALUxInput);			//D Register assuming instruction[4] = D
	
	Mux16(a= regAOut,b= inM,sel= instruction[12],out= ALUyInput);    //using the a-bit as sel
	
	ALU(x=ALUxInput,y=ALUyInput,zx= instruction[11],nx= instruction[10],zy= instruction[9],ny= instruction[8],f= instruction[7],no= instruction[6],out= ALUout,zr=zr,ng=ng);	//TODO: all connections are guesses
	Not16(in=ALUout,out=ALUbar);	//Buffer for ALUout
	Not16(in=ALUbar,out=outM);
	
	Mux(a=false,b=instruction[3],sel=instruction[15],out=writeM);
	
	Not16(in=regAOut,out=regAOutBar);	//Buffer for regAOut
	Not16(in=regAOutBar,out[0..14]=addressM);

}